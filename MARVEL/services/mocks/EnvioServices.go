// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/damian2205/GO_Capacitation/MARVEL/dto"
	mock "github.com/stretchr/testify/mock"
)

// EnvioServices is an autogenerated mock type for the EnvioServices type
type EnvioServices struct {
	mock.Mock
}

// ActualizarUser provides a mock function with given fields: d
func (_m *EnvioServices) ActualizarUser(d dto.Contacto) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.Contacto) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EliminarUser provides a mock function with given fields: d
func (_m *EnvioServices) EliminarUser(d dto.Contacto) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.Contacto) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertarUser provides a mock function with given fields: d
func (_m *EnvioServices) InsertarUser(d dto.Contacto) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.Contacto) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ObtenerUser provides a mock function with given fields:
func (_m *EnvioServices) ObtenerUser() ([]dto.Contacto, error) {
	ret := _m.Called()

	var r0 []dto.Contacto
	if rf, ok := ret.Get(0).(func() []dto.Contacto); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Contacto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
